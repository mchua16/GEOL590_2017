add_mutate <- function(df, col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 <-  mutate(df, new_col = col1 + col2) #allows users to add two columns of a data frame, create a new column with the sum, and allows the user to name the new column
return(add2) #function automatically adds column if value is NA (see last test involving test.csv below)
}
add_mutate(df, col1, col2)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2, new_name)
add_mutate(df, col1, col2)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- paste("petal", n , sep=".")
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2)
install.packages("pryr")
library(dplyr)
install.packages("microbenchmark")
library(tidyverse)
library(lazyeval)
df <- diamonds
col1 <- diamonds$depth #assigns the depth column of the diamonds dataset to col1
col2 <- diamonds$table #assigns the table column of the diamonds dataset to col2
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- paste("petal", sep=".")
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- paste("petal", sep=".")
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- paste(name, sep=".")
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2, new_name)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- paste('name', sep=".")
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2, new_name)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- name
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2, new_name)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- 'name'
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2, new_name)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
new_name <- c(name)
add2 <- lazyeval::interp(~m + n, m=m, n=n)
mutate_(df, .dots = setNames(list(add2), new_name))
}
add_mutate(df, col1, col2, new_name)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), name))
}
add_mutate(df, col1, col2, new_name)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name))
}
add_mutate(df, col1, col2, new_name)
add_mutate(df, col1, col2, sumsss)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
mutate_(df, .dots = setNames(list(add2), name))
}
add_mutate(df, col1, col2, sumsss)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(m), b = as.name(n))
mutate_(df, .dots = setNames(list(add2), name))
}
add_mutate(df, m, n, sumsss)
add_mutate <- function(df, m, n, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ m + n, m = as.name(m), n = as.name(n))
mutate_(df, .dots = setNames(list(add2), name))
}
add_mutate(df, m, n, sumsss)
df <- diamonds
col1 <- diamonds$depth #assigns the depth column of the diamonds dataset to col1
col2 <- diamonds$table #assigns the table column of the diamonds dataset to col2
add_mutate <- function(df, col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ m + n, m = as.name(col1), n = as.name(col2))
mutate_(df, .dots = setNames(list(add2), name))
}
add_mutate(df, col1, col2, sumsss)
add_mutate <- function(df, col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ m + n, m = as.name(col1), n = as.name(col2))
mutate_(df, .dots = setNames(list(add2), name))
}
add_mutate(f(df, col1, col2, sumsss))
add_mutate(f(df, col1, col2, 'sumsss'))
add_mutate(df, col1, col2, 'sumsss')
add_mutate(df, 'col1', 'col2', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ m + n, m = as.name(col1), n = as.name(col2))
df %>%
mutate_(df, .dots = setNames(list(add2), name))
}
add_mutate(f('col1', 'col2', 'sumsss'))
add_mutate('col1', 'col2', 'sumsss')
add_mutate(col1, col2, 'sumsss')
library(lazyeval)
f = function(col1, col2, new_col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
mtcars %>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
df <- mtcars
f = function(col1, col2, new_col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(col1, col2, 'sumsss')
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(col1, col2, 'sumsss')
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(col1, col2, 'sumsss')
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(f('mpg', 'cyl', 'sumsss'))
df <- mtcars
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(f('mpg', 'cyl', 'sumsss'))
df <- mtcars
f = function(col1, col2, new_col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
f = function(col1, col2, col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(f('wt', 'mpg', 'sumsss'))
head(add_mutate('wt', 'mpg', 'sumsss'))
add_mutate('wt', 'mpg', 'sumsss')
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name, na.rm=TRUE))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name), na.rm=TRUE)
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(sum(c(a,b), na.rm = TRUE), .dots = setNames(list(add2), name))
}
('wt', 'mpg', 'sumsss')
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(Sum = sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(Sum = sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
col1 <- diamonds$depth #assigns the depth column of the diamonds dataset to col1
col2 <- diamonds$table #assigns the table column of the diamonds dataset to col2
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
quinate <- read.csv("quinate.csv") #this line and lines below were added to test the "invalid arguments" bullet.
df <- quinate$Time
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(.dots = setNames(list(add2), name))
add_mutate(df, col1, col2, name)
add_mutate(df, col1, col2, name)
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate(df, col1, col2, name)
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
df <- mtcars
library(dplyr)
library(tidyverse)
library(lazyeval)
df <- mtcars
library(lazyeval)
df <- mtcars
f = function(col1, col2, col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
