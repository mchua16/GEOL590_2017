{
    "collab_server" : "",
    "contents" : "install.packages(\"pryr\")\nlibrary(dplyr)\ninstall.packages(\"microbenchmark\")\n\ndf <- diamonds\n\ncol1 <- diamonds$depth #assigns the depth column of the diamonds dataset to col1\n\ncol2 <- diamonds$table #assigns the table column of the diamonds dataset to col2\n\nadd_mutate <- function(df, col1, col2) { #creates a function assigned as add_mutate \n  as.data.frame(df) #I think this makes df a data frame?\n  if(is.data.frame(df)!= TRUE)\n    warning(\"not a data frame\") #if df is not a data frame, this warning is received.\n  if(as.numeric(col1)!= TRUE)\n    warning(\"col1 is not numeric\") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.\n  if(as.numeric(col2)!= TRUE)\n    warning(\"col2 is not numeric\")\n  add2 <- mutate(df, newcol  = col1 + col2) #allows users to add two columns of a data frame, create a new column with the sum, and allows the user to name the new column\n  return(add2) \n} \n\nfive_dollar <- c(1:10^4)\n\nyour_fun <- function (five_dollar) {\n  for (val in five_dollar)  #for values in the vector \"five_dollar...\"\n  sums <- sum(five_dollar) #for loop that calculates the sum of the elements of a vector, particularly \"five_dollar\"\n  print(sums)\n}\n\nyour_fun(1:10^4)\n\ntest.vec <- 1:10^4\nmicrobenchmark(\n  your_fun(test.vec),\n  sum(test.vec)\n) #your_fun takes longer because the for loop would go through all 10,000 rows.\n\nquinate <- read.csv(\"quinate.csv\") #this line and lines below were added to test the \"invalid arguments\" bullet.\n\nq_time <- quinate$Time\n\nadd_mutate <- function(q_time) { #creates a function assigned as add_mutate \n  if(is.data.frame(q_time)!= TRUE)\n    warning(\"not a data frame\") #if df is not a data frame, R gives me this warning.\n}\n\nadd_mutate(q_time)\n#end of testing\n\ndf <- diamonds #this line and below is testing \"NA values\" bullet\n\ncol1 <-  diamonds$table #assigns the depth column of the diamonds dataset to col1\n\ncol2 <- diamonds$price #assigns the table column of the diamonds dataset to col2\n\nadd_mutate <- function(df, col1, col2) {\n  if(as.numeric(col1)!= TRUE)\n    warning(\"col1 is not numeric\")\n  if(as.numeric(col2)!= TRUE)\n    warning(\"col2 is not numeric\")\n  add2 <- mutate(df, newcol  = col1 + col2)\n  return(add2)\n} \n\nadd_mutate(df, col1, col2)\n#end of testing; also works with quinate.csv\n\ncol1\n",
    "created" : 1488835150244.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "879703453",
    "id" : "5A87871A",
    "lastKnownWriteTime" : 1489209694,
    "last_content_update" : 1489209694802,
    "path" : "~/R/GEOL590_2017/R/task8.R",
    "project_path" : "task8.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}